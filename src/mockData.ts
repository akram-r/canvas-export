//@ts-nocheck
export const createWhiteBox = (width, height) => ({
  type: "rect",
  version: "5.3.0",
  originX: "left",
  originY: "top",
  left: 0,
  top: 0,
  width: width,
  height: height,
  fill: "#fff",
  stroke: null,
  strokeWidth: 1,
  strokeDashArray: null,
  strokeLineCap: "butt",
  strokeDashOffset: 0,
  strokeLineJoin: "miter",
  strokeUniform: false,
  strokeMiterLimit: 4,
  scaleX: 1,
  scaleY: 1,
  angle: 0,
  flipX: false,
  flipY: false,
  opacity: 1,
  shadow: null,
  visible: true,
  backgroundColor: "",
  fillRule: "nonzero",
  paintFirst: "fill",
  globalCompositeOperation: "source-over",
  skewX: 0,
  skewY: 0,
  rx: 0,
  ry: 0,
  data: {
    type: "artboard",
    id: "jjrod81",
  },
  selectable: false,
  hoverCursor: "default",
  moveCursor: null,
  hasControls: true,
  hasBorders: true,
  lockRotation: false,
  lockMovementY: false,
  lockScalingX: false,
  lockScalingY: false,
  lockSkewingX: false,
  lockSkewingY: false,
  lockScalingFlip: false,
});

const text = {
  type: "textbox",
  version: "5.3.0",
  originX: "left",
  originY: "top",
  left: 20.95,
  top: 20.95,
  width: 136.59,
  height: 45.2,
  fill: "rgb(0,0,0)",
  stroke: null,
  strokeWidth: 1,
  strokeDashArray: null,
  strokeLineCap: "butt",
  strokeDashOffset: 0,
  strokeLineJoin: "miter",
  strokeUniform: false,
  strokeMiterLimit: 4,
  scaleX: 1,
  scaleY: 1,
  angle: 0,
  flipX: false,
  flipY: false,
  opacity: 1,
  shadow: null,
  visible: true,
  backgroundColor: "",
  fillRule: "nonzero",
  paintFirst: "fill",
  globalCompositeOperation: "source-over",
  skewX: 0,
  skewY: 0,
  fontFamily: "Inter",
  fontWeight: "normal",
  fontSize: 40,
  text: "sadasd",
  underline: false,
  overline: false,
  linethrough: false,
  textAlign: "left",
  fontStyle: "normal",
  lineHeight: 1.16,
  textBackgroundColor: "",
  charSpacing: 0,
  styles: [],
  direction: "ltr",
  path: null,
  pathStartOffset: 0,
  pathSide: "left",
  pathAlign: "baseline",
  minWidth: 20,
  splitByGrapheme: false,
  data: {
    displayText: "Text",
    id: "sfykp10",
    googleFont: "font-family: Inter;",
  },
  selectable: true,
  hoverCursor: null,
  moveCursor: null,
  hasControls: true,
  hasBorders: true,
  lockRotation: false,
  lockMovementY: false,
  lockScalingX: false,
  lockScalingY: false,
  lockSkewingX: false,
  lockSkewingY: false,
  lockScalingFlip: true,
};

const unsplashFilters = [
  'park',
  'playground',
  'landscape',
  'nature',
  'mountain',
  'forest',
  'water',
  'sea',
  'ocean',
  'beach',
  'city',
  'building',
  'architecture',
  'road',
  'car',
  'bus',
]

const getRandomFilter = () => {
  return unsplashFilters[Math.floor(Math.random() * unsplashFilters.length)]
}

const imageTrueRandom = (time) => ({
  type: "image",
  version: "5.3.0",
  originX: "left",
  originY: "top",
  left: 30.31,
  top: 167.82,
  width: 1080,
  height: 1170,
  fill: "rgb(0,0,0)",
  stroke: null,
  strokeWidth: 0,
  strokeDashArray: null,
  strokeLineCap: "butt",
  strokeDashOffset: 0,
  strokeLineJoin: "miter",
  strokeUniform: false,
  strokeMiterLimit: 4,
  scaleX: 0.25,
  scaleY: 0.25,
  angle: 0,
  flipX: false,
  flipY: false,
  opacity: 1,
  shadow: null,
  visible: true,
  backgroundColor: "",
  fillRule: "nonzero",
  paintFirst: "fill",
  globalCompositeOperation: "source-over",
  skewX: 0,
  skewY: 0,
  cropX: 0,
  cropY: 0,
  data: {
    id: "zzcruvv",
  },
  selectable: true,
  hoverCursor: null,
  moveCursor: null,
  hasControls: true,
  hasBorders: true,
  lockRotation: false,
  lockMovementY: false,
  lockScalingX: false,
  lockScalingY: false,
  lockSkewingX: false,
  lockSkewingY: false,
  lockScalingFlip: false,
  src: `https://source.unsplash.com/random/?${getRandomFilter()}${time ? `?time=${time}` : ''}`,
  crossOrigin: "anonymous",
  filters: [],
});

const image = (time) => ({
  type: "image",
  version: "5.3.0",
  originX: "left",
  originY: "top",
  left: 30.31,
  top: 167.82,
  width: 1080,
  height: 1170,
  fill: "rgb(0,0,0)",
  stroke: null,
  strokeWidth: 0,
  strokeDashArray: null,
  strokeLineCap: "butt",
  strokeDashOffset: 0,
  strokeLineJoin: "miter",
  strokeUniform: false,
  strokeMiterLimit: 4,
  scaleX: 0.25,
  scaleY: 0.25,
  angle: 0,
  flipX: false,
  flipY: false,
  opacity: 1,
  shadow: null,
  visible: true,
  backgroundColor: "",
  fillRule: "nonzero",
  paintFirst: "fill",
  globalCompositeOperation: "source-over",
  skewX: 0,
  skewY: 0,
  cropX: 0,
  cropY: 0,
  data: {
    id: "zzcruvv",
  },
  selectable: true,
  hoverCursor: null,
  moveCursor: null,
  hasControls: true,
  hasBorders: true,
  lockRotation: false,
  lockMovementY: false,
  lockScalingX: false,
  lockScalingY: false,
  lockSkewingX: false,
  lockSkewingY: false,
  lockScalingFlip: false,
  src: `https://source.unsplash.com/random/?background${time ? `?time=${time}` : ''}`,
  crossOrigin: "anonymous",
  filters: [],
});
const path1 = {
  type: "path",
  version: "5.3.0",
  originX: "left",
  originY: "top",
  left: 317.27,
  top: 20.95,
  width: 50,
  height: 50,
  fill: "#C4C4C4",
  stroke: null,
  strokeWidth: 1,
  strokeDashArray: null,
  strokeLineCap: "butt",
  strokeDashOffset: 0,
  strokeLineJoin: "miter",
  strokeUniform: false,
  strokeMiterLimit: 4,
  scaleX: 2,
  scaleY: 2,
  angle: 0,
  flipX: false,
  flipY: false,
  opacity: 1,
  shadow: null,
  visible: true,
  backgroundColor: "",
  fillRule: "nonzero",
  paintFirst: "fill",
  globalCompositeOperation: "source-over",
  skewX: 0,
  skewY: 0,
  data: {
    id: "dr0jgzf",
    type: "shape",
    displayName: "square",
  },
  selectable: true,
  hoverCursor: null,
  moveCursor: null,
  hasControls: true,
  hasBorders: true,
  lockRotation: false,
  lockMovementY: false,
  lockScalingX: false,
  lockScalingY: false,
  lockSkewingX: false,
  lockSkewingY: false,
  lockScalingFlip: false,
  path: [["M", 0, 0], ["L", 50, 0], ["L", 50, 50], ["L", 0, 50], ["Z"]],
};
const path2 = {
  type: "path",
  version: "5.3.0",
  originX: "left",
  originY: "top",
  left: 329.19,
  top: 242.34,
  width: 50,
  height: 43.3,
  fill: "#C4C4C4",
  stroke: null,
  strokeWidth: 1,
  strokeDashArray: null,
  strokeLineCap: "butt",
  strokeDashOffset: 0,
  strokeLineJoin: "miter",
  strokeUniform: false,
  strokeMiterLimit: 4,
  scaleX: 2,
  scaleY: 2,
  angle: 0,
  flipX: false,
  flipY: false,
  opacity: 1,
  shadow: null,
  visible: true,
  backgroundColor: "",
  fillRule: "nonzero",
  paintFirst: "fill",
  globalCompositeOperation: "source-over",
  skewX: 0,
  skewY: 0,
  data: {
    id: "hp9u8f9",
    type: "shape",
    displayName: "triangle",
  },
  selectable: true,
  hoverCursor: null,
  moveCursor: null,
  hasControls: true,
  hasBorders: true,
  lockRotation: false,
  lockMovementY: false,
  lockScalingX: false,
  lockScalingY: false,
  lockSkewingX: false,
  lockSkewingY: false,
  lockScalingFlip: false,
  path: [["M", 25, 0], ["L", 50, 43.3013], ["L", 0, 43.3013], ["Z"]],
};
const imageURLArray = [
  "/images/100kb.png",
  "/images/200kb.png",
  "/images/500kb.png",
  "/images/1mb.png",
  "/images/3mb.png",
  "/images/5mb.png",
  "/images/10mb.png",
  "/images/20mb.png",
]
const imagePredefined = (imageSize, withImageCache) => {
  let imageURL = imageURLArray[imageSize];
  if (!imageURL) {
    imageURL = imageURLArray[2];
  }
  return {
    type: "image",
    version: "5.3.0",
    originX: "left",
    originY: "top",
    left: 30.31,
    top: 167.82,
    width: 1080,
    height: 1170,
    fill: "rgb(0,0,0)",
    stroke: null,
    strokeWidth: 0,
    strokeDashArray: null,
    strokeLineCap: "butt",
    strokeDashOffset: 0,
    strokeLineJoin: "miter",
    strokeUniform: false,
    strokeMiterLimit: 4,
    scaleX: 0.25,
    scaleY: 0.25,
    angle: 0,
    flipX: false,
    flipY: false,
    opacity: 1,
    shadow: null,
    visible: true,
    backgroundColor: "",
    fillRule: "nonzero",
    paintFirst: "fill",
    globalCompositeOperation: "source-over",
    skewX: 0,
    skewY: 0,
    cropX: 0,
    cropY: 0,
    data: {
      id: "zzcruvv",
    },
    selectable: true,
    hoverCursor: null,
    moveCursor: null,
    hasControls: true,
    hasBorders: true,
    lockRotation: false,
    lockMovementY: false,
    lockScalingX: false,
    lockScalingY: false,
    lockSkewingX: false,
    lockSkewingY: false,
    lockScalingFlip: false,
    src: `${imageURL}${withImageCache === 'false' ? `?timestamp${Math.random()}` : ''}`,
    crossOrigin: "anonymous",
    filters: [],
  }
}

const rect = {
  type: "rect",
  version: "5.3.0",
  originX: "left",
  originY: "top",
  left: -119.9,
  top: -62,
  width: 388.28,
  height: 17.03,
  fill: "red",
  stroke: "#D0D5DD",
  strokeWidth: 0.8514986376021798,
  strokeDashArray: null,
  strokeLineCap: "butt",
  strokeDashOffset: 0,
  strokeLineJoin: "miter",
  strokeUniform: false,
  strokeMiterLimit: 4,
  scaleX: 1,
  scaleY: 1,
  angle: 0,
  flipX: false,
  flipY: false,
  opacity: 1,
  shadow: null,
  visible: true,
  backgroundColor: "",
  fillRule: "nonzero",
  paintFirst: "fill",
  globalCompositeOperation: "source-over",
  skewX: 0,
  skewY: 0,
  rx: 0,
  ry: 0,
  data: {
    ignoreSnapping: true,
    isSaveExclude: true,
    id: "dsyo151",
    type: "X_RULER_BACKGROUND",
  },
  selectable: false,
  hoverCursor: "default",
  moveCursor: null,
  hasControls: true,
  hasBorders: true,
  lockRotation: false,
  lockMovementY: false,
  lockScalingX: false,
  lockScalingY: false,
  lockSkewingX: false,
  lockSkewingY: false,
  lockScalingFlip: false,
};
const randomAlphaNumeric = length => {
  let s = '';
  Array.from({ length }).some(() => {
    s += Math.random().toString(36).slice(2);
    return s.length >= length;
  });
  return s.slice(0, length);
};
export const getRandomInt = (max) => Math.floor(Math.random() * max);
const shapesArray = [path1, path2]
export const createRandomObject = (elements = 10, width = 800, height = 800) => {
  const randomObjects = [
    rect,
    path1,
    path2,
    image(Math.random()),
    text,
    image(Math.random()),
    image(Math.random()),
    image(Math.random()),
    image(Math.random()),
  ];
  return {
    version: "5.3.0",
    objects: [
      createWhiteBox(width, height),
      ...Array.from({ length: elements }, (_, index) => {
        //repeat element when randomObjects overflow
        // const index1 = index % randomObjects.length;
        const index1 = getRandomInt(randomObjects.length);
        const object = randomObjects[index1];
        object.left = getRandomInt(width);
        object.top = getRandomInt(height);
        return object;
      }),
    ],
  };
};

export const createVariant = ({ shapesCount, textCount, imagesCount, imageSize, width, height, withImageCache }: any) => {
  return {
    version: "5.3.0",
    objects: [
      ...Array.from({ length: shapesCount }, (_, index) => {
        const shape = shapesArray[Math.floor(Math.random() * shapesArray.length)];
        shape.left = getRandomInt(width);
        shape.top = getRandomInt(height);
        return shape;
      }),
      ...Array.from({ length: textCount }, (_, index) => {
        const text1 = {
          ...text,
          left: getRandomInt(width),
          top: getRandomInt(height),
          text: randomAlphaNumeric(Math.floor(Math.random() * 100)),
        };
        return text1;
      }),
      ...Array.from({ length: imagesCount }, (_, index) => {
        if (imagesCount > 2 && index > 2) {
          return {
            ...imageTrueRandom(withImageCache),
            left: getRandomInt(width),
            top: getRandomInt(height),
          };
        } else {
          const image = {
            ...imagePredefined(imageSize, withImageCache),
            left: getRandomInt(width),
            top: getRandomInt(height),
          };
          return image;
        }


      })
    ]
  }
}
